#!/usr/bin/env bash
################################################################################
# Docker-compose utility command
#
# If the first argument is configured project, it will be working project.
# In the other hand, the project directory will be checked back sequently to
# find out working project.
#
# Usage:
#&  `echo_yellow "${EXEC_NAME} [-h|--help]" -en`
#     Show this help.
#
#&  `echo_yellow "${EXEC_NAME} [<CONFIGURED_WORK_DIR>] <docker-compose arguments>" -en`
################################################################################
BASE_DIR=`cd $(dirname "$0"); pwd`
. $BASE_DIR/../../.env

# Include common functions of bash
for lc_script in `find $BASE_DIR/../../include -maxdepth 2 -type f -name '*.sh'`
do
. $lc_script
done

# Show help
if [ "x${1}" = "x" ] || [ "x${1}" = "x-h" ] || [ "x${1}" = "x--help" ]
then
  inc_itselfHelp
fi

# Go to working directory
function gotoWorkDir() {
  if [ -f $WORK_DIR/docker-compose.yml ]
  then
    return
  elif [ -f $WORK_DIR/provision/docker-compose.yml ]
  then
    WORK_DIR=${WORK_DIR}/provision
    cd ${WORK_DIR}

    return
  fi

  cmn_numMatch '/' "$WORK_DIR"
  if [ $? -le 2 ]
  then
     cmn_exitAbnormal "Could not find docker-compose.yml or provision directory!"
  fi

  cd ..
  WORK_DIR=`pwd`
  gotoWorkDir
}

if [ "x${PROJECT_INDEXES[$1]}" != "x" ]
then
  cmn_isStartWith / ${PROJECT_INDEXES[$1]}
  if [ $? -eq 0 ]
  then
    WORK_DIR=${PROJECT_INDEXES[$1]}
  else
    WORK_DIR=$WORKSPACE/${PROJECT_INDEXES[$1]}
  fi

  if [ -f $WORK_DIR/provision/docker-compose.yml ]
  then
    WORK_DIR=$WORK_DIR/provision
  elif [ ! -f $WORK_DIR/docker-compose.yml ]
  then
    cmn_exitAbnormal "${1} is not configured working project!"
  fi

  cd ${WORK_DIR}
  shift
else
  FOUND_PROJECT=1
  cmn_isStartWith pj $1
  if [ $? -eq 0 ] && [ "x${PROJECT_LIST}" != "x" ] && [ ${#1} -lt 4 ]
  then
    if [ ${#1} -eq 2 ]
    then
      WORK_DIR=$WORKSPACE/${PROJECT_LIST}
    else
      PROJECT_NUMBER=${1:2}
      cmn_isPositiveNumber $PROJECT_NUMBER
      if [ $? -eq 0 ] && [ "x${PROJECT_LIST[$PROJECT_NUMBER]}" != "x" ]
      then
        WORK_DIR=$WORKSPACE/${PROJECT_LIST[$PROJECT_NUMBER]}
      fi
    fi

    if [ -f $WORK_DIR/docker-compose.yml ]
    then
      FOUND_PROJECT=0
    elif [ -f $WORK_DIR/provision/docker-compose.yml ]
    then
      FOUND_PROJECT=0
      WORK_DIR=$WORK_DIR/provision
    fi
  fi

  if [ $FOUND_PROJECT -eq 0 ]
  then
    cd ${WORK_DIR}
    shift
  else
    WORK_DIR=`pwd`
    if [ "x`dirname $WORK_DIR`" != "xprovision" ]
    then
      gotoWorkDir
    fi
  fi
fi

if [ -f $WORK_DIR/.provision.env ]
then
  . $WORK_DIR/.provision.env
fi

# Use docker-compose to apply setting '-c, --context NAME'
PARAM_SETTINGS=
if [ "x${1}" = 'x-c' ]
then
  PARAM_SETTINGS='-T'
  shift
elif [ "x${1}" = 'x-cr' ]
then
  PARAM_SETTINGS='-T -u root'
  shift
elif [ "x${1}" = 'x-cu' ]
then
  PARAM_SETTINGS='-T -u'
  shift

  [ -z "$1" ] && cmn_exitAbnormal "Please specific container user!"
  PARAM_SETTINGS="${PARAM_SETTINGS} ${1}"
  shift
fi

if [ "x${PARAM_SETTINGS}" != 'x' ]
then
  SERVICE_LIST=`cd $WORK_DIR && docker-compose ps --services`
  CONNECT_CONTAINER=$CONNECT_DEFAULT_CONTAINER
  if [ ! -z ${1} ]
  then
    while IFS= read -r line; do
      line=`echo $line`
      if [ "x${1}" = "x${line}" ]
      then
        CONNECT_CONTAINER=${line}
        shift

        break
      fi
    done <<< "$SERVICE_LIST"
  fi

  PARAM_SETTINGS="exec ${PARAM_SETTINGS} ${CONNECT_DEFAULT_CONTAINER}"
else
  PARAM_SETTINGS=${DCU_DEFAULT_OPTIONS:=}
fi

docker-compose $PARAM_SETTINGS "$@"

