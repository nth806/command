#!/usr/bin/env bash
#########################################################################################
# Install command utilities
#
# Description:
#&  Install this: put settings in `echo_yellow '~/.bash_command' -n`
#
#   Install utility commands:
#     We don't use submodule/superproject of git because of be difficult for
#     managing. Therefore, we just define commands and clone theme.
#&      `printf '%s\\n      ' "${CMD_LIST[@]}" | sed '/^[[:space:]]*$/d'`
#
#&    Select option is command name to install or `echo_yellow -a -n` to intall all.
#########################################################################################
BASE_DIR=`cd $(dirname "$0"); pwd`

#-------------------------------------------------
CMD_PREFIX=cmd_
CMD_GIT_REPOSITORY='git@gitlab.com:soartools'
CMD_LIST=( pcr pjr shopify shu )

function installCommand () {
  local UTIL_CMD=${CMD_PREFIX}${1}
  if [ -d ${UTIL_CMD} ]
  then
    echo_yellow "${1} has already installed."
  else
    git clone ${CMD_GIT_REPOSITORY}/${UTIL_CMD}.git ${UTIL_CMD}
  fi
}

#-------------------------------------------------
_ENV=.env
_BASH_COMMAND=~/.bash_command

WORKSPACE=
function inputWorkspace () {
  read -e -p "- Workspace: " WORKSPACE
  if [ ! -z "${WORKSPACE}" ]
  then
    [ ! -d "${WORKSPACE}" ] && echo_yellow 'Workspace must be existed directory!' && return

    ! cmn_isStartWith / "${WORKSPACE}" && echo_yellow 'Workspace must be absoluted path!' && return
  fi
}

declare -A PROJECT_INDEXES

PROJECT_NAME=begin
function inputProject () {
  read -e -p "- Project name and its index: " PROJECT_NAME

  [[ -z "$PROJECT_NAME" ]] && return

  local pj_nm=`echo $PROJECT_NAME | cut -f1 -d" "`
  local pj_idx=`echo $PROJECT_NAME | cut -f2 -d" "`
  pj_nm=`cmn_trimSlash "${pj_nm}"`

  [ ! -d "${pj_nm}" ] && echo_yellow "Project name must be a folder in workspace ${WORKSPACE}" && return

  [ -z "$pj_idx" ] && pj_idx=${pj_nm}
  pj_idx=`cmn_trimSlash "${pj_idx}"`
  [[ "${pj_idx}" =~ [^_\.a-zA-Z0-9\-] ]] && echo_yellow "Index is invalid" && return

  PROJECT_INDEXES[${pj_nm}]="${pj_idx}"
}

#-------------------------------------------------
# Include common functions of bash
. $BASE_DIR/include/src

# Show help
if [ "x${1}" = "x-h" ] || [ "x${1}" = "x--help" ]
then
  inc_itselfHelp
fi

echo $SHELL_NAME

#-------------------------------------------------
#### Main process ####
cd "${BASE_DIR}"

if [ "x$SHELL_NAME" = 'xsh' ]
then
  if [ -f ~/.zshenv ]
  then
    _INIT_BASH=~/.zshenv
  elif [ -f ~/.profile ]
  then
    _INIT_BASH=~/.profile
  elif [ -f ~/.zprofile ]
  then
    _INIT_BASH=~/.zprofile
  else
    echo_yellow "Can't locate the initial zsh script"
    exit
  fi
else
  # Default bash
  if [ -f ~/.bashrc ]
  then
    _INIT_BASH=~/.bashrc
  elif [ -f ~/.profile ]
  then
    _INIT_BASH=~/.profile
  elif [ -f ~/.bash_profile ]
  then
    _INIT_BASH=~/.bash_profile
  else
    echo_yellow "Can't locate the initial bash script"
    exit
  fi
fi

# Install this: put settings in ~/.bash_command
if [ -f $_ENV ]
then
  [[ -z "$1" ]] && echo_yellow 'The utility command has already been installed!' && exit
else
  # Do install
  echo_blue 'Input absoluted path to your workspace (where you locate projects'"'"' source).'
  while [[ -z "${WORKSPACE}" ]] || [ ! -d "${WORKSPACE}" ] || ! cmn_isStartWith / "${WORKSPACE}"
  do
    inputWorkspace
  done

  WORKSPACE=`cmn_rmTrailingWith / "${WORKSPACE}"`

  cd "${WORKSPACE}"
  echo_blue 'Input the the projects'"'"' name and their index in the workspace one by one.'
  echo_blue 'Name or its index should only contain alphanumerics and _.- or let it empty to continue.'
  echo_blue 'Input index following name separated by spaces or let it empty to set it as name.'
  while [[ ! -z "${PROJECT_NAME}" ]]
  do
    inputProject
  done
  cd "${BASE_DIR}"

  #--------------------------
  # Add .env file
  echo "WORKSPACE=${WORKSPACE}"$'\n' >> $_ENV

  echo '#### Directory changing settings' >> $_ENV
  echo 'declare -A CD_DEFAULT' >> $_ENV
  echo 'CD_DEFAULT[c]="${COMMAND_DIR}"' >> $_ENV
  echo 'CD_DEFAULT[ws]="${WORKSPACE}"'$'\n' >> $_ENV

  echo '# Change directory by project index' >> $_ENV
  for i in "${!PROJECT_INDEXES[@]}"
  do
    echo "CD_DEFAULT[${PROJECT_INDEXES[${i}]}]="'"${WORKSPACE}/'"${i}"'"' >> $_ENV
  done

  echo >> $_ENV
  echo '#### Projects settings' >> $_ENV
  echo 'declare -A PROJECT_INDEXES' >> $_ENV
  for i in "${!PROJECT_INDEXES[@]}"
  do
    echo "PROJECT_INDEXES[${PROJECT_INDEXES[${i}]}]=${i}" >> $_ENV
  done

  echo >> $_ENV
  echo '# Absolute paths' >> $_ENV
  echo 'PROJECT_INDEXES[cmd]=${COMMAND_DIR}'$'\n' >> $_ENV

  #--------------------------
  # Add ~/.bash_command file
  if [ ! -f $_BASH_COMMAND ]
  then
    echo $'\n''#### Utility Command ####' >> $_BASH_COMMAND
    echo "COMMAND_DIR=${WORK_DIR}" >> $_BASH_COMMAND
    echo '. $COMMAND_DIR/'${_ENV}$'\n' >> $_BASH_COMMAND

    echo 'function ssh_add_keys() {' >> $_BASH_COMMAND
    echo '  echo ssh-add ~/.ssh/id_rsa' >> $_BASH_COMMAND
    echo '}'$'\n' >> $_BASH_COMMAND

    echo '# System variables' >> $_BASH_COMMAND
    echo 'M_OS=`uname | tr '"'[:upper:]' '[:lower:]'"'`' >> $_BASH_COMMAND
    echo 'if [ "x${M_OS:0:5}" = '"'xmingw'"' ]' >> $_BASH_COMMAND
    echo 'then' >> $_BASH_COMMAND
    echo '  M_OS=gitbash' >> $_BASH_COMMAND
    echo 'fi'$'\n' >> $_BASH_COMMAND

    echo '# Utility commands' >> $_BASH_COMMAND
    echo 'if [ -d $COMMAND_DIR/include ]; then' >> $_BASH_COMMAND
    echo '  . $COMMAND_DIR/include/src'$'\n' >> $_BASH_COMMAND

    echo '  # Profile for OS' >> $_BASH_COMMAND
    echo '  . $COMMAND_DIR/profile/${M_OS}.sh'$'\n' >> $_BASH_COMMAND

    echo '  for lc_dir in `find $COMMAND_DIR -type d -name '"'cmd_*'"'`' >> $_BASH_COMMAND
    echo '  do' >> $_BASH_COMMAND
    echo '    lc_basename=`basename $lc_dir`' >> $_BASH_COMMAND
    echo '    lc_basename=${lc_basename#cmd_}' >> $_BASH_COMMAND
    echo '    if [ -x ${lc_dir}/${lc_basename} ]' >> $_BASH_COMMAND
    echo '    then' >> $_BASH_COMMAND
    echo '      alias ${lc_basename}="${lc_dir}/${lc_basename}"' >> $_BASH_COMMAND
    echo '    fi' >> $_BASH_COMMAND
    echo '  done' >> $_BASH_COMMAND
    echo 'else' >> $_BASH_COMMAND
    echo '  echo '"'"'There is no path for common functions!'"'" >> $_BASH_COMMAND
    echo 'fi'$'\n' >> $_BASH_COMMAND

    echo 'PATH=$PATH:$COMMAND_DIR/cmd/sh:$COMMAND_DIR/cmd/${M_OS}/:'$'\n' >> $_BASH_COMMAND

    echo 'unset lc_script lc_dir lc_basename' >> $_BASH_COMMAND
    echo 'export PATH' >> $_BASH_COMMAND

    # Source .bash_command
    echo $'\n# Custom command utilities' >> $_INIT_BASH
    echo '. '"${_BASH_COMMAND}" >> $_INIT_BASH
    echo
  fi
fi

# Install utility commands
[[ -z "$1" ]] && exit
if [ "x${1}" = 'x-a' ]
then
  for lc in "${CMD_LIST[@]}"
  do
    installCommand ${lc}
  done

  exit
fi

[[ "${CMD_LIST[*]}" =~ (^|[[:space:]])$1($|[[:space:]]) ]] || cmn_exitAbnormal 'Invalid command!'

installCommand $1
